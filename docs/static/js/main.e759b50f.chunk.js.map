{"version":3,"sources":["collapsible-card.module.scss","collapsible-card.js","Calculator.js","other/reportWebVitals.js","index.js","calculator.module.scss"],"names":["module","exports","CollapsibleCard","props","cardHeader","hideOnFocusLost","disableHeaderButton","wrapperClassName","isCollapsed","toggleCollapse","useMeasure","ref","height","cardRef","React","createRef","cardHeaderRef","spring","useSpring","to","useEffect","App","document","getElementById","addEventListener","handleEventListeners","removeEventListener","e","el","current","btn","contains","target","isSameNode","className","onClick","undefined","div","style","collapsibleCardStyle","collapsibleSection","children","Calculator","useState","currentNumberString","setCurrentNumberString","previousNumber","setPreviousNumber","previousExpression","setPreviousExpression","currentOperator","setCurrentOperator","isOperatorActive","setOperatorStatus","currentNumberIsResult","setCurrentNumberAsResult","hasError","setErrorStatus","pastResults","setPastResults","moreButtonExpanded","setMoreButtonStatus","inputFieldID","JSON","parse","localStorage","getItem","setAppHeight","formatForDisplay","useCallback","str","isNaN","Number","toString","slice","toLocaleString","includes","strArray","split","maximumFractionDigits","maximumSignificantDigits","formatCurrentNumberDisplayed","handlePastResults","newResult","newArray","length","pop","unshift","setItem","stringify","handleUsePastResult","pastResult","resultToUse","replace","window","alert","reset","handlePastedNumber","preventDefault","value","handleNumbers","number","numberStr","numberTooBig","handleOperators","operator","result","isFinite","removeLastEntry","currentLength","handleKeyUp","id","key","containerEl","getElementsByClassName","container","newHeight","navigator","standalone","innerHeight","scrollToTop","body","scrollTo","onresize","buttons","toggleMoreOptions","newStatus","displayContainer","operatorAndPreviousExpression","previousExpressionDisplay","currentOperatorDisplay","currentNumberDisplay","errorCurrentNumber","answer","moreOptionsContainer","tabIndex","moreButton","expanded","optionsWrapper","optionsContainer","onSubmit","pasteContainer","pasteNumberField","type","placeholder","applyPastedNumber","pastResultsHeader","map","index","clearPastResults","buttonContainer","button","data-operator","shadeBottomOnStandalone","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e759b50f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"collapsibleSection\":\"collapsible-card_collapsibleSection__1u5Md\"};","import React, { useEffect } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { useMeasure } from \"react-use\";\r\nimport collapsibleCardStyle from './collapsible-card.module.scss';\r\n\r\n/*\r\n    Component that shows the children passed in a collapsible card\r\n    cardHeader : the non collapsible section\r\n    optional :\r\n         collapse button\r\n         skipStyleHeader - don't style the header / divs\r\n         skipAllStyling,\r\n         buttonSize - largeBtn or undefined (default)\r\n         disableHeaderButton - cardHeader won't be a button. Must use collapse button to collapse.\r\n         hideOnFocusLost - collapse if clicked outside this card\r\n*/\r\nexport default function CollapsibleCard (props) {\r\n    let {cardHeader, hideOnFocusLost, disableHeaderButton,\r\n        wrapperClassName, isCollapsed, toggleCollapse} = props;\r\n    // calculate collapsible section height. use for spring animation\r\n    const [ref, {height}] = useMeasure();\r\n    // ref for collapsible section\r\n    const cardRef = React.createRef();\r\n    // ref for card header - used to ignore click when using hideOnFocusLost\r\n    const cardHeaderRef = React.createRef();\r\n    const spring = useSpring({\r\n        to: {\r\n            height: isCollapsed? 0: height+10\r\n            // Adding 10 here cause it seems to undercut the height a little\r\n        }\r\n    })\r\n    const handleCollapse = () => {\r\n        toggleCollapse();\r\n    }\r\n    // Add event listeners to App if using hide on focus lost\r\n    useEffect(() => {\r\n        if (!hideOnFocusLost) return\r\n        function handleEventListeners (e) {\r\n            const el = cardRef.current;\r\n            const btn = cardHeaderRef.current;\r\n            if ((!el.contains(e.target) && !el.isSameNode(e.target))\r\n                && (btn && !btn.contains(e.target) && !btn.isSameNode(e.target))) {\r\n                toggleCollapse('collapse');\r\n            }\r\n        }\r\n        const App = document.getElementById('App');\r\n        App.addEventListener('click', handleEventListeners)\r\n        return () => {\r\n            App.removeEventListener('click', handleEventListeners)\r\n        }\r\n    }, [hideOnFocusLost, cardHeaderRef, cardRef, toggleCollapse])\r\n    return (\r\n        <div className={wrapperClassName}>\r\n            <div\r\n                ref={cardHeaderRef}\r\n                onClick={!disableHeaderButton?handleCollapse:undefined}\r\n            >\r\n                {cardHeader}\r\n            </div>\r\n            <animated.div\r\n                style={spring}\r\n                ref={cardRef}\r\n                className={collapsibleCardStyle.collapsibleSection}\r\n            >\r\n                <div\r\n                    className=\"collapsibleSectionItems\"\r\n                    ref={ref}>{props.children}\r\n                </div>\r\n            </animated.div>\r\n        </div>\r\n    )\r\n}","import style from './calculator.module.scss';\r\nimport { MdKeyboardBackspace, MdExpandMore, MdDone } from 'react-icons/md';\r\nimport { useEffect, useState, useCallback } from 'react';\r\nimport CollapsibleCard from \"./collapsible-card\";\r\n\r\nfunction Calculator() {\r\n    const [currentNumberString, setCurrentNumberString] = useState(\"0\");\r\n    const [previousNumber, setPreviousNumber] = useState(null);\r\n    const [previousExpression, setPreviousExpression] = useState(\"\");\r\n    const [currentOperator, setCurrentOperator] = useState(null);\r\n    const [isOperatorActive, setOperatorStatus] = useState(false);\r\n    const [currentNumberIsResult, setCurrentNumberAsResult] = useState(false);\r\n    const [hasError, setErrorStatus] = useState(false);\r\n    const [pastResults, setPastResults] = useState([]);\r\n    const [moreButtonExpanded, setMoreButtonStatus] = useState(false);\r\n    const inputFieldID = \"pastedNumberField\";\r\n    // get past results from local storage\r\n    useEffect(() => {\r\n        setPastResults(JSON.parse(localStorage.getItem('calculatorPastResults')) || []);\r\n    }, [])\r\n    // on mobile set height to fullscreen. Doesn't always apply to device width > 800 due to max height set.\r\n    useEffect(() => {\r\n        setAppHeight();\r\n    }, []);\r\n    // used directly on previous expression/current number displayed on dom.\r\n    // add thousand separators\r\n    const formatForDisplay = useCallback( (str) => {\r\n        // max digits for numbers displayed to user\r\n        const maxDigits = {style:'decimal', maximumFractionDigits: 10, maximumSignificantDigits: 14};\r\n        if (isNaN(Number(str))) return str;\r\n        // don't remove dot for decimal\r\n        if (str.toString().slice(-1) === '.') {\r\n            return `${Number(str.slice(0,-1)).toLocaleString()}.`\r\n        }\r\n        // don't remove zeros after a decimal\r\n        if (str.toString().slice(-1) === \"0\" && str.toString().includes('.')) {\r\n            const strArray = str.split('.');\r\n            return `${strArray[0].toLocaleString()}.${strArray[1]}`\r\n        }\r\n        return Number(str).toLocaleString('en-US', maxDigits);\r\n    }, [])\r\n    // format current number for display - if current number is null, use previous number\r\n    const formatCurrentNumberDisplayed = useCallback( (str) => {\r\n        if (str === null) {return formatForDisplay(previousNumber)}\r\n        return formatForDisplay(str);\r\n    }, [formatForDisplay, previousNumber])\r\n    // add new result to past results array. mutate where necessary\r\n    const handlePastResults = useCallback( function (newResult) {\r\n        let newArray = [...pastResults];\r\n        if (pastResults.length >= 5) newArray.pop();\r\n        newArray.unshift(newResult);\r\n        setPastResults(newArray);\r\n        localStorage.setItem('calculatorPastResults', JSON.stringify(newArray));\r\n    }, [pastResults])\r\n    // clear past results\r\n    const handleClearPastResults = () => {\r\n        setPastResults([]);\r\n        localStorage.setItem('calculatorPastResults', JSON.stringify([]));\r\n    }\r\n    // function to handle selecting a past result - set it to current number string\r\n    const handleUsePastResult = useCallback( function (pastResult) {\r\n        return () => {\r\n            const resultToUse = pastResult.replace(/,/g, '');\r\n            if (isNaN(Number(resultToUse))) return window.alert(pastResult + ' is not a valid number');\r\n            if (hasError) reset();\r\n            else if (previousNumber) setPreviousExpression(formatForDisplay(previousNumber));\r\n            setCurrentNumberAsResult(false);\r\n            if (isOperatorActive) {\r\n                setOperatorStatus(false);\r\n                setCurrentNumberString(resultToUse);\r\n                if (currentOperator === '=') {\r\n                    setPreviousExpression(\"\");\r\n                    setPreviousNumber(null);\r\n                    setCurrentOperator(null);\r\n                }\r\n            } else {\r\n                setCurrentNumberString(resultToUse);\r\n            }\r\n            setMoreButtonStatus(false);\r\n        }\r\n    }, [currentOperator, formatForDisplay, hasError, isOperatorActive, previousNumber])\r\n    // function to handle pasted numbers\r\n    const handlePastedNumber = useCallback(function (e) {\r\n        e.preventDefault();\r\n        const value = document.getElementById(inputFieldID).value;\r\n        if (value === \"\") return\r\n        handleUsePastResult(value)();\r\n    }, [handleUsePastResult])\r\n    // function to handle number clicks\r\n    const handleNumbers = useCallback(\r\n        (number) => {\r\n            return () => {\r\n                if (hasError) return;\r\n                if (numberTooBig(currentNumberString) && !isOperatorActive) return;\r\n                if (currentNumberString && currentNumberString.includes('.') && number === '.') return\r\n                if (previousNumber) setPreviousExpression(formatForDisplay(previousNumber));\r\n                setCurrentNumberAsResult(false);\r\n                if (isOperatorActive) {\r\n                    setOperatorStatus(false);\r\n                    setCurrentNumberString(number.toString());\r\n                    if (currentOperator === '=') {\r\n                        setPreviousExpression(\"\");\r\n                        setPreviousNumber(null);\r\n                        setCurrentOperator(null);\r\n                    }\r\n                } else if (number === '.') {\r\n                    setCurrentNumberString(`${currentNumberString}${number}`);\r\n                } else if (currentNumberString === \"0\" || !currentNumberString) {\r\n                    setCurrentNumberString(number.toString());\r\n                } else if (currentNumberString === \"-0\") {\r\n                    setCurrentNumberString(`-${number.toString()}`);\r\n                } else {\r\n                    setCurrentNumberString(`${currentNumberString}${number}`);\r\n                }\r\n            }\r\n        }, [currentNumberString, currentOperator, hasError, isOperatorActive, previousNumber, formatForDisplay]\r\n    )\r\n    // function to handle operator clicks\r\n    const handleOperators = useCallback( (operator) => {\r\n        return () => {\r\n            if (hasError) return\r\n            setOperatorStatus(true);\r\n            // handle arithmetic if there is a previous number\r\n            let result;\r\n            if (previousNumber !== null && currentNumberString !== null && currentOperator) {\r\n                switch (currentOperator) {\r\n                    case '+' : {\r\n                        result = Number(previousNumber) + Number(currentNumberString);\r\n                        break\r\n                    }\r\n                    case '-' : {\r\n                        result = Number(previousNumber) - Number(currentNumberString);\r\n                        break\r\n                    }\r\n                    case '*' : {\r\n                        result = Number(previousNumber) * Number(currentNumberString);\r\n                        break\r\n                    }\r\n                    case '/' : {\r\n                        result = Number(previousNumber) / Number(currentNumberString);\r\n                        break\r\n                    }\r\n                    case '^' : {\r\n                        result = Number(previousNumber) ** Number(currentNumberString);\r\n                        break\r\n                    }\r\n                    case '=' : {\r\n                        result = Number(previousNumber);\r\n                        break\r\n                    }\r\n                    default : {\r\n                        result = Number(previousNumber);\r\n                    }\r\n                }\r\n                // After clicking an operator that does arithmetic - show the last expression. If = just show the last number\r\n                if (currentOperator === '=') {\r\n                    setPreviousExpression(formatForDisplay(previousNumber));\r\n                } else {\r\n                    setPreviousExpression(\r\n                        `${formatForDisplay(previousNumber)} ${currentOperator} ${formatForDisplay(currentNumberString)}`\r\n                    );\r\n                }\r\n                // if number is too big or small, set error status\r\n                if (!isFinite(result) || isNaN(result)) {\r\n                    setErrorStatus(true);\r\n                    setCurrentNumberString(\"ERROR, CLEAR\");\r\n                    return\r\n                }\r\n                if (result > 999999999999999 || result < -999999999999999) {\r\n                    setErrorStatus(true);\r\n                    setCurrentNumberString(\"TOO LONG, CLEAR\");\r\n                    return\r\n                }\r\n                // set current number to null. prevent further operations until another number is selected\r\n                // set previous to result. Setting previous number here since user can't mutate result directly\r\n                setCurrentNumberString(null);\r\n                setCurrentNumberAsResult(true);\r\n                handlePastResults(formatForDisplay(result));\r\n                setPreviousNumber(formatForDisplay(result).replace(/,/g,''));\r\n            }\r\n            // if no calculation is done, set the current operator and the previous number as the current number displayed\r\n            setCurrentOperator(operator);\r\n            if (typeof result === 'undefined' && currentNumberString) {\r\n                setPreviousNumber(Number(currentNumberString));\r\n                setCurrentNumberString(null);\r\n            }\r\n        }\r\n    }, [\r\n        currentNumberString, currentOperator, formatForDisplay,\r\n        hasError, previousNumber, handlePastResults\r\n    ])\r\n    // function to remove last user entry\r\n    const removeLastEntry  = useCallback( function () {\r\n        if (currentNumberIsResult || isOperatorActive || hasError) return;\r\n        const currentLength = currentNumberString.length;\r\n        if (currentLength <= 1) return setCurrentNumberString(\"0\");\r\n        setCurrentNumberString(currentNumberString.slice(0, currentLength-1));\r\n    }, [currentNumberString, currentNumberIsResult, hasError, isOperatorActive])\r\n    // function to handle key presses\r\n    const handleKeyUp = useCallback(\r\n        (e) => {\r\n            if (e.target.id === inputFieldID) return\r\n            if (e.key >= 0 && e.key <= 9) {\r\n                return handleNumbers((e.key))();\r\n            }\r\n            if (['*', '-', '/', '+', '=', '^'].includes(e.key)) {\r\n                return handleOperators(e.key)();\r\n            }\r\n            switch (e.key) {\r\n                case '.' : {\r\n                    handleNumbers('.')();\r\n                    break\r\n                }\r\n                case 'Backspace' : {\r\n                    removeLastEntry();\r\n                    break;\r\n                }\r\n                case 'Escape' : {\r\n                    reset();\r\n                    break\r\n                }\r\n                case 'Enter' : {\r\n                    handleOperators('=')();\r\n                    break\r\n                }\r\n                default : {\r\n                    break\r\n                }\r\n            }\r\n        }, [handleNumbers, handleOperators, removeLastEntry]\r\n    )\r\n    // add event listeners for keyboard - remove on unmount\r\n    useEffect(() => {\r\n        const scrollToTop = () => {\r\n            document.body.scrollTo(0, 0)\r\n            window.scrollTo(0, 0)\r\n        };\r\n        scrollToTop();\r\n        document.getElementById(inputFieldID)\r\n            .addEventListener('focusout', scrollToTop);\r\n        window.addEventListener('keyup', handleKeyUp);\r\n        return () => {\r\n            document.getElementById(inputFieldID)\r\n                .removeEventListener('focusout', scrollToTop);\r\n            window.removeEventListener('keyup', handleKeyUp);\r\n        }\r\n    }, [handleKeyUp]);\r\n    // window resizing listener\r\n    window.onresize = setAppHeight;\r\n    function setAppHeight () {\r\n        const containerEl = document.getElementsByClassName(`${style.container}`)[0];\r\n        const newHeight = window.navigator.standalone === true ? window.innerHeight - 40 : window.innerHeight;\r\n        containerEl.style.height = `${newHeight}px`;\r\n    }\r\n    // function to handle negative toggle\r\n    function handleNegativeToggle () {\r\n        if (hasError || isOperatorActive) return;\r\n        if (currentNumberString[0] === '-') {\r\n            setCurrentNumberString(currentNumberString.slice(1));\r\n        } else {\r\n            setCurrentNumberString(`-${currentNumberString}`);\r\n        }\r\n    }\r\n    // function for Clear - Reset\r\n    function reset () {\r\n        setPreviousNumber(null);\r\n        setCurrentOperator(null);\r\n        setCurrentNumberString(\"0\");\r\n        setCurrentNumberAsResult(false);\r\n        setPreviousExpression(null);\r\n        setErrorStatus(false);\r\n    }\r\n    // all buttons in order (order is important)\r\n    const buttons = [\r\n        [\"Clr\", \"operator\", 'clear', reset],\r\n        [<MdKeyboardBackspace />, 'operator', \"backspace\", removeLastEntry],\r\n        [<>y<sup>a</sup></>, 'operator', 'powerOf', handleOperators('^')],\r\n        [\"÷\", 'operator', 'divide', handleOperators('/')],\r\n        [\"7\", 'regular', 'seven', handleNumbers(7)],\r\n        [\"8\", 'regular', 'eight', handleNumbers(8)],\r\n        [\"9\", 'regular', 'nine', handleNumbers(9)],\r\n        [\"×\", 'operator', 'multiply', handleOperators('*')],\r\n        [\"4\", 'regular', 'four', handleNumbers(4)],\r\n        [\"5\", 'regular', 'five', handleNumbers(5)],\r\n        [\"6\", 'regular', 'six', handleNumbers(6)],\r\n        [\"-\", 'operator', 'subtract', handleOperators('-')],\r\n        [\"1\", 'regular', 'one', handleNumbers(1)],\r\n        [\"2\", 'regular', 'two', handleNumbers(2)],\r\n        [\"3\", 'regular', 'three', handleNumbers(3)],\r\n        [\"+\", 'operator', 'add', handleOperators('+')],\r\n        [\"0\", 'regular', 'zero', handleNumbers(0)],\r\n        [\".\", 'regular', 'dot', handleNumbers('.')],\r\n        [\"±\", 'regular', 'plusMinus', handleNegativeToggle],\r\n        [\"=\", 'operator', 'equals', handleOperators('=')],\r\n    ];\r\n    // check if a current number has more than 12 significant digits\r\n    function numberTooBig (str) {\r\n        if (str === null) return false;\r\n        const numberStr = str.toString();\r\n        let length = str.length;\r\n        if (numberStr.includes('.')) length--;\r\n        if (numberStr.includes('-')) length--;\r\n        return length >= 13;\r\n    }\r\n    // toggle past results container\r\n    // status is optional - default is opposite of current status\r\n    function toggleMoreOptions (newStatus) {\r\n        if (newStatus && newStatus === 'collapse') return setMoreButtonStatus(false);\r\n        setMoreButtonStatus(!moreButtonExpanded);\r\n    }\r\n    return (\r\n        <div className=\"App\" id=\"App\">\r\n          <div className={style.container}>\r\n              <div className={style.displayContainer}>\r\n                  <div className={style.operatorAndPreviousExpression}>\r\n                      <span className={style.previousExpressionDisplay}>{previousExpression}</span>\r\n                      <span className={style.currentOperatorDisplay}>{currentOperator}</span>\r\n                  </div>\r\n                  <span className={`${style.currentNumberDisplay} ${hasError?style.errorCurrentNumber:\"\"}`}>\r\n                       <span\r\n                           className={style.answer}\r\n                       >\r\n                           {currentNumberIsResult ? \"(Ans)\" : \"\"}\r\n                       </span>\r\n                      {formatCurrentNumberDisplayed(currentNumberString)}\r\n                  </span>\r\n              </div>\r\n              <div className={style.moreOptionsContainer}>\r\n                  <CollapsibleCard\r\n                      cardHeader=\r\n                          {\r\n                              <button\r\n                                  onClick={toggleMoreOptions}\r\n                                  tabIndex=\"-1\"\r\n                                  className={`${style.moreButton} ${moreButtonExpanded?style.expanded:\"\"}`}\r\n                              >\r\n                                  <MdExpandMore />\r\n                              </button>\r\n                          }\r\n                      wrapperClassName={style.optionsWrapper}\r\n                      isCollapsed={!moreButtonExpanded}\r\n                      toggleCollapse={toggleMoreOptions}\r\n                      hideOnFocusLost={false}\r\n                      disableHeaderButton={true}\r\n                      >\r\n                      <div className={style.optionsContainer}>\r\n                          <div>\r\n                              <form\r\n                                  onSubmit={handlePastedNumber}\r\n                                  className={style.pasteContainer}>\r\n                                  <input\r\n                                      className={style.pasteNumberField}\r\n                                      id={inputFieldID}\r\n                                      type=\"text\"\r\n                                      placeholder=\"Paste a number\"\r\n                                  />\r\n                                  <button\r\n                                      type=\"submit\"\r\n                                      className={style.applyPastedNumber}\r\n                                  >\r\n                                    <MdDone />\r\n                                  </button>\r\n\r\n                              </form>\r\n                              {\r\n                                  pastResults.length === 0 ?\r\n                                  <span className={style.pastResultsHeader}>NO RESULTS</span> :\r\n                                  <span className={style.pastResultsHeader}>PAST RESULTS</span>\r\n                              }\r\n                              {\r\n                                  pastResults.map((result, index) => (\r\n                                      <button\r\n                                          key={index}\r\n                                          className={style.pastResult}\r\n                                          onClick={handleUsePastResult(result)}\r\n                                      >\r\n                                          {result}\r\n                                      </button>\r\n                                  ))\r\n                              }\r\n                              {\r\n                                  pastResults.length > 0 &&\r\n                                      <button\r\n                                          className={style.clearPastResults}\r\n                                          onClick={handleClearPastResults}\r\n                                      >\r\n                                          Clear All Results\r\n                                      </button>\r\n                              }\r\n                          </div>\r\n                      </div>\r\n                  </CollapsibleCard>\r\n\r\n              </div>\r\n              <div className={style.buttonContainer}>\r\n              {\r\n                  buttons.map(button => (\r\n                      <button\r\n                          key={button[2]}\r\n                          onClick={button[3]}\r\n                          className={`${style[button[1]]} ${style[button[2]]}`}\r\n                          data-operator={button[2]}\r\n                          tabIndex=\"-1\"\r\n                      >\r\n                          <span>{(hasError && button[0] !=='Clr') ?\"\":button[0]}</span>\r\n                      </button>\r\n                  ))\r\n              }\r\n              </div>\r\n            </div>\r\n            <div className={style.shadeBottomOnStandalone} />\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default Calculator;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from \"./Calculator\";\nimport reportWebVitals from './other/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"calculator_container__erLDa\",\"displayContainer\":\"calculator_displayContainer__N_Z89\",\"operatorAndPreviousExpression\":\"calculator_operatorAndPreviousExpression__1kCpj\",\"previousExpressionDisplay\":\"calculator_previousExpressionDisplay__1UPcv\",\"answer\":\"calculator_answer__1IiIg\",\"moreOptionsContainer\":\"calculator_moreOptionsContainer__1uz2W\",\"optionsWrapper\":\"calculator_optionsWrapper__pdYmM\",\"optionsContainer\":\"calculator_optionsContainer__1bEgD\",\"pastResultsHeader\":\"calculator_pastResultsHeader__1AKMK\",\"pastResult\":\"calculator_pastResult__1xkiL\",\"clearPastResults\":\"calculator_clearPastResults__GIK2u\",\"pasteContainer\":\"calculator_pasteContainer__Uvivy\",\"pasteNumberField\":\"calculator_pasteNumberField__eDKgk\",\"applyPastedNumber\":\"calculator_applyPastedNumber__2ElBz\",\"moreButton\":\"calculator_moreButton__1TVzB\",\"expanded\":\"calculator_expanded__2uhyE\",\"buttonContainer\":\"calculator_buttonContainer__3bHps\",\"currentNumberDisplay\":\"calculator_currentNumberDisplay__2Rjfr\",\"errorCurrentNumber\":\"calculator_errorCurrentNumber__LcM2C\",\"operator\":\"calculator_operator__l6BBo\",\"clear\":\"calculator_clear__1MR2H\",\"backspace\":\"calculator_backspace__3zj3M\",\"powerOf\":\"calculator_powerOf__3SGrJ\",\"multiply\":\"calculator_multiply__39pZU\",\"shadeBottomOnStandalone\":\"calculator_shadeBottomOnStandalone__n3UUZ\"};"],"sourceRoot":""}