{"version":3,"sources":["Calculator.js","other/reportWebVitals.js","index.js","calculator.module.scss"],"names":["Calculator","useState","currentNumberString","setCurrentNumberString","previousNumber","setPreviousNumber","previousExpression","setPreviousExpression","currentOperator","setCurrentOperator","isOperatorActive","setOperatorStatus","currentNumberIsResult","setCurrentNumberAsResult","hasError","setErrorStatus","useEffect","setAppHeight","formatForDisplay","useCallback","str","isNaN","Number","toLocaleString","style","maximumFractionDigits","maximumSignificantDigits","formatCurrentNumberDisplayed","formatUnwieldyNumbers","value","toString","includes","parseFloat","toPrecision","replace","handleNumbers","number","numberStr","length","numberTooBig","handleOperators","operator","result","isFinite","handleKeyUp","e","key","console","log","reset","containerEl","document","getElementsByClassName","container","newHeight","window","navigator","standalone","innerHeight","height","addEventListener","removeEventListener","onresize","buttons","currentLength","slice","className","id","displayContainer","operatorAndPreviousExpression","previousExpressionDisplay","currentOperatorDisplay","currentNumberDisplay","errorCurrentNumber","answer","buttonContainer","map","button","onClick","data-operator","tabIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"yLA+QeA,MA3Qf,WAAuB,IAAD,EACoCC,mBAAS,KAD7C,mBACXC,EADW,KACUC,EADV,OAE0BF,mBAAS,MAFnC,mBAEXG,EAFW,KAEKC,EAFL,OAGkCJ,mBAAS,IAH3C,mBAGXK,EAHW,KAGSC,EAHT,OAI4BN,mBAAS,MAJrC,mBAIXO,EAJW,KAIMC,EAJN,OAK4BR,oBAAS,GALrC,mBAKXS,EALW,KAKOC,EALP,OAMwCV,oBAAS,GANjD,mBAMXW,EANW,KAMYC,EANZ,OAOiBZ,oBAAS,GAP1B,mBAOXa,EAPW,KAODC,EAPC,KAWlBC,qBAAU,WACNC,MAED,IACH,IAAMC,EAAmBC,uBAAa,SAACC,GAGnC,OAAIC,MAAMC,OAAOF,IAAcA,EACxBE,OAAOF,GAAKG,eAAe,QAFhB,CAACC,MAAM,UAAWC,sBAAuB,GAAIC,yBAA0B,OAG1F,IAEGC,EAA+BR,uBAAa,SAACC,GAC/C,OAA0BF,EAAd,OAARE,EAAuChB,EACnBgB,KACzB,CAACF,EAAkBd,IAGhBwB,EAAwBT,uBAAa,SAACU,GAGxC,OAAIA,EAAMC,WAAWC,SAAS,KACnBT,OAAOU,WAAWH,GAAOI,YAAY,GAEzCJ,EAAMN,eAAe,QAJV,CAACC,MAAM,UAAWC,sBAAuB,GAAIC,yBAA0B,KAIzCQ,QAAQ,KAAK,MAC9D,IAGGC,EAAgBhB,uBAClB,SAACiB,GACG,OAAO,WACCtB,GAoLhB,SAAuBM,GACnB,GAAY,OAARA,EAAc,OAAO,EACzB,IAAMiB,EAAYjB,EAAIU,WAClBQ,EAASlB,EAAIkB,OACbD,EAAUN,SAAS,MAAMO,IACzBD,EAAUN,SAAS,MAAMO,IAE7B,OAAOA,GAAU,GA1LLC,CAAarC,KAAyBQ,GACtCR,GAAuBA,EAAoB6B,SAAS,MAAmB,MAAXK,IAC5DhC,GAAgBG,EAAsBW,EAAiBd,IAC3DS,GAAyB,GACrBH,GACAC,GAAkB,GAClBR,EAAuBiC,EAAON,YACN,MAApBtB,IACAD,EAAsB,IACtBF,EAAkB,MAClBI,EAAmB,QAGvBN,EADkB,MAAXiC,EACgB,GAAD,OAAIlC,GAAJ,OAA0BkC,GACjB,MAAxBlC,GAAgCA,EAER,OAAxBA,EACgB,IAAD,OAAKkC,EAAON,YAEX,GAAD,OAAI5B,GAAJ,OAA0BkC,GAJzBA,EAAON,gBAOvC,CAAC5B,EAAqBM,EAAiBM,EAAUJ,EAAkBN,EAAgBc,IAGpFsB,EAAkBrB,uBAAa,SAACsB,GAClC,OAAO,WACH,IAAI3B,EAAJ,CAGA,IAAI4B,EACJ,GAHA/B,GAAkB,GAGK,OAAnBP,GAAmD,OAAxBF,GAAgCM,EAAiB,CAC5E,OAAQA,GACJ,IAAK,IACDkC,EAASpB,OAAOlB,GAAkBkB,OAAOpB,GACzC,MAEJ,IAAK,IACDwC,EAASpB,OAAOlB,GAAkBkB,OAAOpB,GACzC,MAEJ,IAAK,IACDwC,EAASpB,OAAOlB,GAAkBkB,OAAOpB,GACzC,MAEJ,IAAK,IACDwC,EAASpB,OAAOlB,GAAkBkB,OAAOpB,GACzC,MAEJ,IAAK,IACDwC,EAAM,SAAGpB,OAAOlB,GAAmBkB,OAAOpB,IAC1C,MAEJ,IAAK,IACDwC,EAASpB,OAAOlB,GAChB,MAEJ,QACIsC,EAASpB,OAAOlB,GAYxB,GAPIG,EADoB,MAApBC,EACsBU,EAAiBd,GAEjB,GAAD,OACdc,EAAiBd,GADH,YACsBI,EADtB,YACyCU,EAAiBhB,MAI9EyC,SAASD,IAAWrB,MAAMqB,GAG3B,OAFA3B,GAAe,QACfZ,EAAuB,gBAG3B,GAAIuC,EAAS,gBAAkBA,GAAU,eAGrC,OAFA3B,GAAe,QACfZ,EAAuB,mBAK3BA,EAAuB,MACvBU,GAAyB,GACzBR,EAAkBuB,EAAsBc,IAG5CjC,EAAmBgC,IACdC,GAAUxC,IACXG,EAAkBiB,OAAOpB,IACzBC,EAAuB,WAGhC,CAACD,EAAqBM,EAAiBU,EAAkBU,EAAuBd,EAAUV,IAGvFwC,EAAczB,uBAChB,SAAC0B,GACG,GAAIA,EAAEC,KAAO,GAAKD,EAAEC,KAAO,EAEvB,OADAC,QAAQC,IAAIH,EAAEC,KACPX,EAAeU,EAAEC,IAAjBX,GAEX,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKJ,SAASc,EAAEC,KACrC,OAAON,EAAgBK,EAAEC,IAAlBN,GAGX,OADAO,QAAQC,IAAIH,EAAEC,KACND,EAAEC,KACN,IAAK,SACDG,IACA,MAEJ,IAAK,QACDT,EAAgB,IAAhBA,GACA,MAEJ,QACIO,QAAQC,IAAI,iBAGrB,CAACb,EAAeK,IAOvB,SAASvB,IACL,IAAMiC,EAAcC,SAASC,uBAAT,UAAmC5B,IAAM6B,YAAa,GACpEC,GAA4C,IAAhCC,OAAOC,UAAUC,WAAsBF,OAAOG,YAAc,GAAKH,OAAOG,YAC1FR,EAAY1B,MAAMmC,OAAlB,UAA8BL,EAA9B,MAmBJ,SAASL,IACL5C,EAAkB,MAClBI,EAAmB,MACnBN,EAAuB,KACvBU,GAAyB,GACzBN,EAAsB,MACtBQ,GAAe,GAjCnBC,qBAAU,WAEN,OADAuC,OAAOK,iBAAiB,QAAShB,GAC1B,kBAAMW,OAAOM,oBAAoB,QAASjB,MAClD,CAACA,IACJW,OAAOO,SAAW7C,EA+BlB,IAAM8C,EAAU,CACZ,CAAC,MAAO,WAAY,QAASd,GAC7B,CAAC,cAAC,IAAD,IAAyB,WAAY,YAjB1C,WACI,KAAIrC,GAAyBF,GAAoBI,GAAjD,CACA,IAAMkD,EAAgB9D,EAAoBoC,OAC1C,GAAI0B,GAAiB,EAAG,OAAO7D,EAAuB,KACtDA,EAAuBD,EAAoB+D,MAAM,EAAGD,EAAc,OAclE,CAAC,yCAAG,uCAAiB,WAAY,UAAWxB,EAAgB,MAC5D,CAAC,OAAK,WAAY,SAAUA,EAAgB,MAC5C,CAAC,IAAK,UAAW,QAASL,EAAc,IACxC,CAAC,IAAK,UAAW,QAASA,EAAc,IACxC,CAAC,IAAK,UAAW,OAAQA,EAAc,IACvC,CAAC,OAAK,WAAY,WAAYK,EAAgB,MAC9C,CAAC,IAAK,UAAW,OAAQL,EAAc,IACvC,CAAC,IAAK,UAAW,OAAQA,EAAc,IACvC,CAAC,IAAK,UAAW,MAAOA,EAAc,IACtC,CAAC,IAAK,WAAY,WAAYK,EAAgB,MAC9C,CAAC,IAAK,UAAW,MAAOL,EAAc,IACtC,CAAC,IAAK,UAAW,MAAOA,EAAc,IACtC,CAAC,IAAK,UAAW,QAASA,EAAc,IACxC,CAAC,IAAK,WAAY,MAAOK,EAAgB,MACzC,CAAC,IAAK,UAAW,OAAQL,EAAc,IACvC,CAAC,IAAK,UAAW,MAAOA,EAAc,MACtC,CAAC,OAAK,UAAW,YA3CrB,WACQrB,GAAYJ,IACe,MAA3BR,EAAoB,GACpBC,EAAuBD,EAAoB+D,MAAM,IAEjD9D,EAAuB,IAAD,OAAKD,OAuC/B,CAAC,IAAK,WAAY,SAAUsC,EAAgB,OAYhD,OACI,qBAAK0B,UAAU,MAAf,SACE,sBAAKA,UAAW1C,IAAM6B,UAAWc,GAAG,OAApC,UACI,sBAAKD,UAAW1C,IAAM4C,iBAAtB,UACI,sBAAKF,UAAW1C,IAAM6C,8BAAtB,UACI,sBAAMH,UAAW1C,IAAM8C,0BAAvB,SAAmDhE,IACnD,sBAAM4D,UAAW1C,IAAM+C,uBAAvB,SAAgD/D,OAEpD,uBAAM0D,UAAS,UAAK1C,IAAMgD,qBAAX,YAAmC1D,EAASU,IAAMiD,mBAAmB,IAApF,UACK,sBACIP,UAAW1C,IAAMkD,OADrB,SAGK9D,EAAwB,QAAU,KAEvCe,EAA6BzB,SAGtC,qBAAKgE,UAAW1C,IAAMmD,gBAAtB,SAEIZ,EAAQa,KAAI,SAAAC,GAAM,OACd,wBAEIC,QAASD,EAAO,GAChBX,UAAS,UAAK1C,IAAMqD,EAAO,IAAlB,YAAyBrD,IAAMqD,EAAO,KAC/CE,gBAAeF,EAAO,GACtBG,SAAS,KALb,SAOI,+BAAQlE,GAAyB,QAAb+D,EAAO,GAAc,GAAGA,EAAO,MAN9CA,EAAO,eCnPvBI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzC,SAAS0C,eAAe,SAM1BZ,K,kBCdAa,EAAOC,QAAU,CAAC,UAAY,8BAA8B,iBAAmB,qCAAqC,8BAAgC,kDAAkD,0BAA4B,8CAA8C,OAAS,2BAA2B,gBAAkB,oCAAoC,qBAAuB,yCAAyC,mBAAqB,uCAAuC,SAAW,6BAA6B,MAAQ,0BAA0B,UAAY,8BAA8B,QAAU,4BAA4B,SAAW,gC","file":"static/js/main.6126f5be.chunk.js","sourcesContent":["import style from './calculator.module.scss';\r\nimport { MdKeyboardBackspace } from 'react-icons/md';\r\nimport { useEffect, useState, useCallback } from 'react';\r\n\r\nfunction Calculator() {\r\n    const [currentNumberString, setCurrentNumberString] = useState(\"0\");\r\n    const [previousNumber, setPreviousNumber] = useState(null);\r\n    const [previousExpression, setPreviousExpression] = useState(\"\");\r\n    const [currentOperator, setCurrentOperator] = useState(null);\r\n    const [isOperatorActive, setOperatorStatus] = useState(false);\r\n    const [currentNumberIsResult, setCurrentNumberAsResult] = useState(false);\r\n    const [hasError, setErrorStatus] = useState(false);\r\n\r\n\r\n    // on mobile set height to fullscreen. Doesn't always apply to device width > 800 due to max height set.\r\n    useEffect(() => {\r\n        setAppHeight();\r\n\r\n    }, []);\r\n    const formatForDisplay = useCallback( (str) => {\r\n        // max digits for numbers displayed to user\r\n        const maxDigits = {style:'decimal', maximumFractionDigits: 10, maximumSignificantDigits: 14};\r\n        if (isNaN(Number(str))) return str;\r\n        return Number(str).toLocaleString('en-US', maxDigits);\r\n    }, []\r\n    )\r\n    const formatCurrentNumberDisplayed = useCallback( (str) => {\r\n        if (str === null) {return formatForDisplay(previousNumber)}\r\n        return formatForDisplay(str);\r\n    }, [formatForDisplay, previousNumber]\r\n    )\r\n    // properly handle javascript's in-precision with decimals\r\n    const formatUnwieldyNumbers = useCallback( (value) => {\r\n        // max digits for numbers displayed to user\r\n        const maxDigits = {style:'decimal', maximumFractionDigits: 10, maximumSignificantDigits: 14};\r\n        if (value.toString().includes('e')) {\r\n            return Number.parseFloat(value).toPrecision(6);\r\n        }\r\n        return value.toLocaleString('en-US', maxDigits).replace(/,/g,'');\r\n    }, []\r\n    )\r\n    // function to handle number clicks\r\n    const handleNumbers = useCallback(\r\n        (number) => {\r\n            return () => {\r\n                if (hasError) return;\r\n                if (numberTooBig(currentNumberString) && !isOperatorActive) return;\r\n                if (currentNumberString && currentNumberString.includes('.') && number === '.') return\r\n                if (previousNumber) setPreviousExpression(formatForDisplay(previousNumber));\r\n                setCurrentNumberAsResult(false);\r\n                if (isOperatorActive) {\r\n                    setOperatorStatus(false);\r\n                    setCurrentNumberString(number.toString());\r\n                    if (currentOperator === '=') {\r\n                        setPreviousExpression(\"\");\r\n                        setPreviousNumber(null);\r\n                        setCurrentOperator(null);\r\n                    }\r\n                } else if (number === '.') {\r\n                    setCurrentNumberString(`${currentNumberString}${number}`);\r\n                } else if (currentNumberString === \"0\" || !currentNumberString) {\r\n                    setCurrentNumberString(number.toString());\r\n                } else if (currentNumberString === \"-0\") {\r\n                    setCurrentNumberString(`-${number.toString()}`);\r\n                } else {\r\n                    setCurrentNumberString(`${currentNumberString}${number}`);\r\n                }\r\n            }\r\n        }, [currentNumberString, currentOperator, hasError, isOperatorActive, previousNumber, formatForDisplay]\r\n    )\r\n    // function to handle operator clicks\r\n    const handleOperators = useCallback( (operator) => {\r\n        return () => {\r\n            if (hasError) return\r\n            setOperatorStatus(true);\r\n            // handle arithmetic if there is a previous number\r\n            let result;\r\n            if (previousNumber !== null && currentNumberString !== null && currentOperator) {\r\n                switch (currentOperator) {\r\n                    case '+' : {\r\n                        result = Number(previousNumber) + Number(currentNumberString);\r\n                        break\r\n                    }\r\n                    case '-' : {\r\n                        result = Number(previousNumber) - Number(currentNumberString);\r\n                        break\r\n                    }\r\n                    case '*' : {\r\n                        result = Number(previousNumber) * Number(currentNumberString);\r\n                        break\r\n                    }\r\n                    case '/' : {\r\n                        result = Number(previousNumber) / Number(currentNumberString);\r\n                        break\r\n                    }\r\n                    case '^' : {\r\n                        result = Number(previousNumber) ** Number(currentNumberString);\r\n                        break\r\n                    }\r\n                    case '=' : {\r\n                        result = Number(previousNumber);\r\n                        break\r\n                    }\r\n                    default : {\r\n                        result = Number(previousNumber);\r\n                    }\r\n                }\r\n                // After clicking an operator that does arithmetic - show the last expression. If = just show the last number\r\n                if (currentOperator === '=') {\r\n                    setPreviousExpression(formatForDisplay(previousNumber));\r\n                } else {\r\n                    setPreviousExpression(\r\n                        `${formatForDisplay(previousNumber)} ${currentOperator} ${formatForDisplay(currentNumberString)}`\r\n                    );\r\n                }\r\n                // if number is too big or small, set error status\r\n                if (!isFinite(result) || isNaN(result)) {\r\n                    setErrorStatus(true);\r\n                    setCurrentNumberString(\"ERROR, CLEAR\");\r\n                    return\r\n                }\r\n                if (result > 99999999999999 || result < -99999999999999) {\r\n                    setErrorStatus(true);\r\n                    setCurrentNumberString(\"TOO LONG, CLEAR\");\r\n                    return\r\n                }\r\n                // set current number to null. prevent further operations until another number is selected\r\n                // set previous to result. Setting previous number here since user can't mutate result directly\r\n                setCurrentNumberString(null);\r\n                setCurrentNumberAsResult(true);\r\n                setPreviousNumber(formatUnwieldyNumbers(result));\r\n            }\r\n            // if no calculation is done, set the current operator and the previous number as the current number displayed\r\n            setCurrentOperator(operator);\r\n            if (!result && currentNumberString) {\r\n                setPreviousNumber(Number(currentNumberString));\r\n                setCurrentNumberString(null);\r\n            }\r\n        }\r\n    }, [currentNumberString, currentOperator, formatForDisplay, formatUnwieldyNumbers, hasError, previousNumber]\r\n    )\r\n    // function to handle key presses\r\n    const handleKeyUp = useCallback(\r\n        (e) => {\r\n            if (e.key >= 0 && e.key <= 9) {\r\n                console.log(e.key);\r\n                return handleNumbers((e.key))();\r\n            }\r\n            if (['*', '-', '/', '+', '='].includes(e.key)) {\r\n                return handleOperators(e.key)();\r\n            }\r\n            console.log(e.key);\r\n            switch (e.key) {\r\n                case 'Escape' : {\r\n                    reset();\r\n                    break\r\n                }\r\n                case 'Enter' : {\r\n                    handleOperators('=')();\r\n                    break\r\n                }\r\n                default : {\r\n                    console.log('Hey there!');\r\n                }\r\n            }\r\n        }, [handleNumbers, handleOperators]\r\n    )\r\n    useEffect(() => {\r\n        window.addEventListener('keyup', handleKeyUp);\r\n        return () => window.removeEventListener('keyup', handleKeyUp)\r\n    }, [handleKeyUp]);\r\n    window.onresize = setAppHeight;\r\n    function setAppHeight () {\r\n        const containerEl = document.getElementsByClassName(`${style.container}`)[0];\r\n        const newHeight = window.navigator.standalone === true ? window.innerHeight - 40 : window.innerHeight;\r\n        containerEl.style.height = `${newHeight}px`;\r\n    }\r\n    // function to handle negative toggle\r\n    function handleNegativeToggle () {\r\n        if (hasError || isOperatorActive) return;\r\n        if (currentNumberString[0] === '-') {\r\n            setCurrentNumberString(currentNumberString.slice(1));\r\n        } else {\r\n            setCurrentNumberString(`-${currentNumberString}`);\r\n        }\r\n    }\r\n    // function to remove last user entry\r\n    function removeLastEntry () {\r\n        if (currentNumberIsResult || isOperatorActive || hasError) return;\r\n        const currentLength = currentNumberString.length;\r\n        if (currentLength <= 1) return setCurrentNumberString(\"0\");\r\n        setCurrentNumberString(currentNumberString.slice(0, currentLength-1));\r\n    }\r\n    // function for Clear - Reset\r\n    function reset () {\r\n        setPreviousNumber(null);\r\n        setCurrentOperator(null);\r\n        setCurrentNumberString(\"0\");\r\n        setCurrentNumberAsResult(false);\r\n        setPreviousExpression(null);\r\n        setErrorStatus(false);\r\n    }\r\n    const buttons = [\r\n        [\"Clr\", \"operator\", 'clear', reset],\r\n        [<MdKeyboardBackspace />, 'operator', \"backspace\", removeLastEntry],\r\n        [<>z<sup>a</sup></>, 'operator', 'powerOf', handleOperators('^')],\r\n        [\"÷\", 'operator', 'divide', handleOperators('/')],\r\n        [\"7\", 'regular', 'seven', handleNumbers(7)],\r\n        [\"8\", 'regular', 'eight', handleNumbers(8)],\r\n        [\"9\", 'regular', 'nine', handleNumbers(9)],\r\n        [\"×\", 'operator', 'multiply', handleOperators('*')],\r\n        [\"4\", 'regular', 'four', handleNumbers(4)],\r\n        [\"5\", 'regular', 'five', handleNumbers(5)],\r\n        [\"6\", 'regular', 'six', handleNumbers(6)],\r\n        [\"-\", 'operator', 'subtract', handleOperators('-')],\r\n        [\"1\", 'regular', 'one', handleNumbers(1)],\r\n        [\"2\", 'regular', 'two', handleNumbers(2)],\r\n        [\"3\", 'regular', 'three', handleNumbers(3)],\r\n        [\"+\", 'operator', 'add', handleOperators('+')],\r\n        [\"0\", 'regular', 'zero', handleNumbers(0)],\r\n        [\".\", 'regular', 'dot', handleNumbers('.')],\r\n        [\"±\", 'regular', 'plusMinus', handleNegativeToggle],\r\n        [\"=\", 'operator', 'equals', handleOperators('=')],\r\n    ];\r\n    // check if a current number has more than 12 significant digits\r\n    function numberTooBig (str) {\r\n        if (str === null) return false;\r\n        const numberStr = str.toString();\r\n        let length = str.length;\r\n        if (numberStr.includes('.')) length--;\r\n        if (numberStr.includes('-')) length--;\r\n        // note - this means 13 numbers are allowed since it's typically checking the current number\r\n        return length >= 12;\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n          <div className={style.container} id=\"kawa\">\r\n              <div className={style.displayContainer}>\r\n                  <div className={style.operatorAndPreviousExpression}>\r\n                      <span className={style.previousExpressionDisplay}>{previousExpression}</span>\r\n                      <span className={style.currentOperatorDisplay}>{currentOperator}</span>\r\n                  </div>\r\n                  <span className={`${style.currentNumberDisplay} ${hasError?style.errorCurrentNumber:\"\"}`}>\r\n                       <span\r\n                           className={style.answer}\r\n                       >\r\n                           {currentNumberIsResult ? \"(Ans)\" : \"\"}\r\n                       </span>\r\n                      {formatCurrentNumberDisplayed(currentNumberString)}\r\n                  </span>\r\n              </div>\r\n              <div className={style.buttonContainer}>\r\n              {\r\n                  buttons.map(button => (\r\n                      <button\r\n                          key={button[2]}\r\n                          onClick={button[3]}\r\n                          className={`${style[button[1]]} ${style[button[2]]}`}\r\n                          data-operator={button[2]}\r\n                          tabIndex=\"-1\"\r\n                      >\r\n                          <span>{(hasError && button[0] !=='Clr') ?\"\":button[0]}</span>\r\n                      </button>\r\n                  ))\r\n              }\r\n              </div>\r\n            </div>\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default Calculator;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from \"./Calculator\";\nimport reportWebVitals from './other/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"calculator_container__erLDa\",\"displayContainer\":\"calculator_displayContainer__N_Z89\",\"operatorAndPreviousExpression\":\"calculator_operatorAndPreviousExpression__1kCpj\",\"previousExpressionDisplay\":\"calculator_previousExpressionDisplay__1UPcv\",\"answer\":\"calculator_answer__1IiIg\",\"buttonContainer\":\"calculator_buttonContainer__3bHps\",\"currentNumberDisplay\":\"calculator_currentNumberDisplay__2Rjfr\",\"errorCurrentNumber\":\"calculator_errorCurrentNumber__LcM2C\",\"operator\":\"calculator_operator__l6BBo\",\"clear\":\"calculator_clear__1MR2H\",\"backspace\":\"calculator_backspace__3zj3M\",\"powerOf\":\"calculator_powerOf__3SGrJ\",\"multiply\":\"calculator_multiply__39pZU\"};"],"sourceRoot":""}